name: 'Publish Native Installers'
description: Publish jDeploy Bundles on Github or npm
author: shannah
branding:
  icon: archive
  color: blue

inputs:
  deploy_target:
    description: Target deployment destination (npm or github).
    # Options are github or npm
    default: github
  github_token:
    description: Github token
    required: false
  npm_token:
    description: npm token
    required: false
  jdeploy_version:
    description: The version of Jdeploy
    default: '4.1.2'
  jdeploy_registry_url:
    description: The URL of the jDeploy application registry
    required: false
    default: 'https://www.jdeploy.com/'
  target_repository:
    description: Optional target repository where to publish releases.
    required: false
    default: ${{ github.repository }}

runs:
  using: composite
  steps:
    - name: Check Deploy Target
      if: ${{ inputs.deploy_target != 'github' && inputs.deploy_target != 'npm' }}
      shell: bash
      run: |
        echo "Unsupported jdeploy deploy_target: ${{ inputs.deploy_target }}"
        exit 1
    - name: Check Github Deployment Inputs
      if: ${{ inputs.deploy_target == 'github' && inputs.github_token == '' }}
      shell: bash
      run: |
        echo "jdeploy action missing github_token parameter"
        exit 1
    - name: Check npm Deployment Inputs
      if: ${{ inputs.deploy_target == 'npm' && inputs.npm_token == '' }}
      shell: bash
      run: |
        echo "jdeploy action missing npm_token parameter"
        exit 1
    - name: Set up Git Config
      shell: bash
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
    - name: Set up Node
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'
        registry-url: 'https://registry.npmjs.org'

    - name: Setup jDeploy Registry
      shell: bash
      run: |
        echo "JDEPLOY_REGISTRY_URL=${{ inputs.jdeploy_registry_url }}" >> $GITHUB_ENV

    - name: Save Original JAVA_HOME
      if: env.JAVA_HOME
      shell: bash
      run: |
        echo "ORIGINAL_JAVA_HOME=${JAVA_HOME}" >> $GITHUB_ENV

    - name: Set up Isolated Java for jDeploy (only for git:// version)
      if: ${{ startsWith(inputs.jdeploy_version, 'git://') }}
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'zulu'
        cache: maven
      id: setup-java-jdeploy

    - name: Configure Java for jDeploy Only
      if: ${{ startsWith(inputs.jdeploy_version, 'git://') }}
      shell: bash
      run: |
        echo "JAVA_HOME_JDEPLOY=${{ steps.setup-java-jdeploy.outputs.path }}" >> $GITHUB_ENV
        echo "Using isolated JAVA_HOME for jDeploy: $JAVA_HOME_JDEPLOY"

    - name: Restore Original JAVA_HOME
      if: ${{ startsWith(inputs.jdeploy_version, 'git://') && env.ORIGINAL_JAVA_HOME }}
      shell: bash
      run: |
        echo "Restoring original JAVA_HOME"
        echo "JAVA_HOME=${ORIGINAL_JAVA_HOME}" >> $GITHUB_ENV

    - name: Set jDeploy Ref
      if: ${{ startsWith(inputs.jdeploy_version, 'git://') }}
      shell: bash
      run: |
        jdeploy_version="${{ inputs.jdeploy_version }}"
        JDEPLOY_REF="${jdeploy_version#git://}"
        echo "JDEPLOY_REF=$JDEPLOY_REF" >> $GITHUB_ENV

    - name: Checkout jDeploy Source
      if: ${{ startsWith(inputs.jdeploy_version, 'git://') }}
      uses: actions/checkout@v3
      with:
        repository: 'shannah/jdeploy'
        path: './jdeploy-source'
        ref: '${{ env.JDEPLOY_REF }}'

    - name: Install jDeploy from Source
      id: jdeploy_install_source
      if: ${{ startsWith(inputs.jdeploy_version, 'git://') }}
      shell: bash
      run: |
        export JAVA_HOME="$JAVA_HOME_JDEPLOY"
        export PATH="$JAVA_HOME/bin:$PATH"
        echo "Building jDeploy from source..."
        cd jdeploy-source/shared
        mvn clean install -DskipTests --batch-mode --no-transfer-progress
        cd ../cli
        mvn clean package -DskipTests --batch-mode --no-transfer-progress
        npm install
        npm link
        echo "jdeploy_exec=$(which jdeploy)" >> $GITHUB_ENV
      env:
        MAVEN_OPTS: "-Xmx2g"

    - name: Install jDeploy from NPM
      id: jdeploy_install_standard
      if: ${{ !startsWith(inputs.jdeploy_version, 'git://') }}
      shell: bash
      run: |
        echo "jdeploy_exec=npx jdeploy@${JDEPLOY_VERSION}" >> $GITHUB_ENV
      env:
        JDEPLOY_VERSION: ${{ inputs.jdeploy_version }}

    - name: Set jdeploy.jdeployVersion for Branch
      if: ${{ inputs.deploy_target == 'github' && github.ref_type == 'branch' }}
      shell: bash
      run: |
        if [[ "${{ startsWith(inputs.jdeploy_version, 'git://') }}" == "true" ]]; then
          npm pkg set jdeploy.jdeployVersion='latest'
        else
          npm pkg set jdeploy.jdeployVersion='${{ inputs.jdeploy_version }}'
        fi
        npm pkg set version="0.0.0-${{ github.ref_name }}"
        npm pkg set jdeploy.commitHash="$GITHUB_SHA"
        GITHUB_REPOSITORY=${{ inputs.target_repository }} $jdeploy_exec github-prepare-release
      env:
        GH_TOKEN: ${{ github.actor }}:${{ inputs.github_token }}

    - name: Sanitize version name
      shell: bash
      if: ${{ github.ref_type == 'tag' }}
      run: |
        TAG_VERSION=${{ github.ref_name }}
        if [[ $TAG_VERSION} = v* ]]; then
          echo "TAG_VERSION=${TAG_VERSION:1}" >> $GITHUB_ENV
        else
          echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV
        fi
    - name: Prepare Installer Bundles for Branch
      if: ${{ inputs.deploy_target == 'github' && github.ref_type == 'branch' }}
      shell: bash
      run: |
        npm pkg set version="0.0.0-${{ github.ref_name }}"
        if [[ "${{ startsWith(inputs.jdeploy_version, 'git://') }}" == "true" ]]; then
          npm pkg set jdeploy.jdeployVersion='latest'
        else
          npm pkg set jdeploy.jdeployVersion='${{ inputs.jdeploy_version }}'
        fi
        npm pkg set jdeploy.commitHash="$GITHUB_SHA"
        GITHUB_REPOSITORY=${{ inputs.target_repository }} $jdeploy_exec github-prepare-release
      env:
        GH_TOKEN: ${{ github.actor }}:${{ inputs.github_token }}

    - name: Prepare Installer Bundles for Tag
      if: ${{ inputs.deploy_target == 'github' && github.ref_type == 'tag' }}
      shell: bash
      run: |
        npm pkg set version="$TAG_VERSION"
        if [[ "${{ startsWith(inputs.jdeploy_version, 'git://') }}" == "true" ]]; then
          npm pkg set jdeploy.jdeployVersion='latest'
        else
          npm pkg set jdeploy.jdeployVersion='${{ inputs.jdeploy_version }}'
        fi
        npm pkg set jdeploy.commitHash="$GITHUB_SHA"
        npm pkg set jdeploy.gitTag="${{ github.ref_name }}"
        GITHUB_REPOSITORY=${{ inputs.target_repository }} $jdeploy_exec github-prepare-release
      env:
        GH_TOKEN: ${{ github.actor }}:${{ inputs.github_token }}

    - name: Publish package-info.json to GitHub
      uses: softprops/action-gh-release@v2
      if: ${{ inputs.deploy_target == 'github' && inputs.target_repository == github.repository }}
      with:
        token: ${{ inputs.github_token }}
        tag_name: "jdeploy"
        prerelease: true
        files: ./jdeploy/github-release-files/package-info.json

    - name: Publish package-info.json to Github
      if: ${{ inputs.deploy_target == 'github' && inputs.target_repository != github.repository }}
      shell: bash
      run: |
        gh release delete -R '${{ inputs.target_repository }}' jdeploy || true
        gh release create -R '${{ inputs.target_repository }}' jdeploy ./jdeploy/github-release-files/package-info.json
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Upload files to GitHub Snapshot Release for Branch
      uses: softprops/action-gh-release@v2
      if: ${{ inputs.deploy_target == 'github' && github.ref_type == 'branch' }}
      with:
        tag_name: "${{ github.ref_name }}"
        token: "${{ inputs.github_token }}"
        prerelease: true
        files: |
          ./jdeploy/github-release-files/*

    - name: Upload files to Github Snapshot Release for Branch
      if: ${{ inputs.deploy_target == 'github' && inputs.target_repository != github.repository }}
      shell: bash
      run: |
        gh release delete -R '${{ inputs.target_repository }}' '${{ github.ref_name }}' || true
        gh release create -R '${{ inputs.target_repository }}' '${{ github.ref_name }}' -F ./jdeploy/github-release-files/jdeploy-release-notes.md ./jdeploy/github-release-files/*
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Upload Files to Github Release for Tag
      if: ${{ inputs.deploy_target == 'github' && github.ref_type == 'tag' && inputs.target_repository == github.repository }}
      uses: xresloader/upload-to-github-release@v1.6.0
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        file: "./jdeploy/github-release-files/*"
        tags: true
        overwrite: true

    - name: Update release body (for branch release)
      if: ${{ inputs.deploy_target == 'github' && github.ref_type == 'branch' && inputs.target_repository == github.repository }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_REPOSITORY: ${{ github.repository }}

      run: |
        set -e
        BODY=$(cat ./jdeploy/github-release-files/jdeploy-release-notes.md)
        BODY_JSON="{\"body\": $(echo "$BODY" | jq -sR .)}"
        RELEASE_RESULT=$(curl -s \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${GITHUB_TOKEN}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${GITHUB_REF_NAME})
        RELEASE_ID=$( jq -r  '.id' <<< "${RELEASE_RESULT}" ) 
        echo "Release ID is ${RELEASE_ID}"
        curl \
        -X PATCH \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${GITHUB_TOKEN}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID} \
        -d "$BODY_JSON"

    - name: Update release body (for tag release)
      if: ${{ inputs.deploy_target == 'github' && github.ref_type == 'tag' && inputs.target_repository == github.repository }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_REPOSITORY: ${{ github.repository }}

      run: |
        set -e
        BODY=$(cat ./jdeploy/github-release-files/jdeploy-release-notes.md)
        
        RELEASE_RESULT=$(curl -s \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${GITHUB_TOKEN}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${GITHUB_REF_NAME})
        RELEASE_ID=$( jq -r  '.id' <<< "${RELEASE_RESULT}" ) 
        OLD_BODY=$(jq -r '.body' <<< "${RELEASE_RESULT}" )
        NEW_BODY=$(GITHUB_RELEASE_BODY="$OLD_BODY" JDEPLOY_RELEASE_NOTES="$BODY" $jdeploy_exec github-build-release-body)
        BODY_JSON="{\"body\": $(echo "$NEW_BODY" | jq -sR .)}"
        echo "Release ID is ${RELEASE_ID}"
        curl \
        -X PATCH \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${GITHUB_TOKEN}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID} \
        -d "$BODY_JSON"

    - name: Publish to npm
      if: ${{ inputs.deploy_target == 'npm' && github.ref_type == 'tag' }}
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ inputs.npm_token }}
      run: |
        npm pkg set version="$TAG_VERSION"
        if [[ "${{ startsWith(inputs.jdeploy_version, 'git://') }}" == "true" ]]; then
          npm pkg set jdeploy.jdeployVersion='latest'
        else
          npm pkg set jdeploy.jdeployVersion='${{ inputs.jdeploy_version }}'
        fi
        npm pkg set jdeploy.commitHash="$GITHUB_SHA"
        $jdeploy_exec publish
