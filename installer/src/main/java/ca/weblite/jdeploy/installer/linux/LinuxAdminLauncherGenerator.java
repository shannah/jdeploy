package ca.weblite.jdeploy.installer.linux;

import java.io.*;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;

public class LinuxAdminLauncherGenerator {
    public static final String ADMIN_LAUNCHER_SUFFIX = "-admin";

    /**
     * Get the admin launcher file path for a given launcher
     */
    public File getAdminLauncherFile(File sourceLauncher) {
        String name = sourceLauncher.getName();
        String baseName = name;
        String extension = "";

        int lastDot = name.lastIndexOf('.');
        if (lastDot > 0) {
            baseName = name.substring(0, lastDot);
            extension = name.substring(lastDot);
        }

        return new File(sourceLauncher.getParentFile(), baseName + ADMIN_LAUNCHER_SUFFIX + extension);
    }

    /**
     * Generate an admin launcher wrapper script for Linux
     *
     * @param sourceLauncher The original launcher executable
     * @return The generated admin launcher file
     * @throws IOException If an error occurs during generation
     */
    public File generateAdminLauncher(File sourceLauncher) throws IOException {
        if (!System.getProperty("os.name").toLowerCase().contains("linux")) {
            throw new UnsupportedOperationException("Admin launcher generation is only supported on Linux");
        }

        if (!sourceLauncher.exists()) {
            throw new IllegalArgumentException("Source launcher does not exist: " + sourceLauncher);
        }

        File adminLauncher = getAdminLauncherFile(sourceLauncher);

        System.out.println("Creating admin launcher for: " + sourceLauncher.getAbsolutePath());

        createAdminWrapperScript(sourceLauncher, adminLauncher);
        System.out.println("Created admin wrapper script at: " + adminLauncher.getAbsolutePath());

        makeExecutable(adminLauncher);
        System.out.println("Made admin launcher executable");

        return adminLauncher;
    }

    /**
     * Create the admin wrapper script
     */
    private void createAdminWrapperScript(File sourceLauncher, File adminLauncher) throws IOException {
        String launcherPath = sourceLauncher.getAbsolutePath();
        String appName = sourceLauncher.getName();

        // Generate the wrapper script content
        String scriptContent = "#!/bin/sh\n" +
            "# Admin wrapper for " + appName + "\n" +
            "# Generated by jDeploy\n" +
            "\n" +
            "# Real application binary\n" +
            "APP=\"" + launcherPath + "\"\n" +
            "\n" +
            "# Detect environment variables with fallbacks\n" +
            ": \"${DISPLAY:=:0}\"\n" +
            ": \"${XAUTHORITY:=$HOME/.Xauthority}\"\n" +
            ": \"${XDG_RUNTIME_DIR:=$XDG_RUNTIME_DIR}\"\n" +
            "\n" +
            "# Try to allow root to connect to X server (XWayland / X11)\n" +
            "# This is needed for GUI applications to display properly\n" +
            "xhost +SI:localuser:root >/dev/null 2>&1 || true\n" +
            "\n" +
            "# Launch the application with elevated privileges\n" +
            "# Forward display environment variables so the GUI can work\n" +
            "pkexec env DISPLAY=\"$DISPLAY\" \\\n" +
            "    XAUTHORITY=\"$XAUTHORITY\" \\\n" +
            "    XDG_RUNTIME_DIR=\"$XDG_RUNTIME_DIR\" \\\n" +
            "    \"$APP\" \"$@\"\n" +
            "\n" +
            "# Store the exit code\n" +
            "EXIT_CODE=$?\n" +
            "\n" +
            "# Revoke X server permission (best-effort cleanup)\n" +
            "xhost -SI:localuser:root >/dev/null 2>&1 || true\n" +
            "\n" +
            "# Exit with the same code as the application\n" +
            "exit $EXIT_CODE\n";

        // Write the script to file
        Files.write(adminLauncher.toPath(), scriptContent.getBytes(StandardCharsets.UTF_8));
    }

    /**
     * Make the admin launcher executable
     */
    private void makeExecutable(File adminLauncher) throws IOException {
        try {
            ProcessBuilder pb = new ProcessBuilder("chmod", "+x", adminLauncher.getAbsolutePath());
            Process process = pb.start();
            int exitCode = process.waitFor();

            if (exitCode != 0) {
                throw new IOException("Failed to make admin launcher executable: chmod exited with code " + exitCode);
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new IOException("Interrupted while making admin launcher executable", e);
        }
    }

    /**
     * Generate an admin desktop file for Linux desktop environments
     * This creates a .desktop file that uses the admin launcher
     *
     * @param sourceDesktopFile The original .desktop file
     * @param adminLauncher The admin launcher script
     * @param title The application title (will have " (Run as Admin)" appended)
     * @return The generated admin desktop file
     * @throws IOException If an error occurs during generation
     */
    public File generateAdminDesktopFile(File sourceDesktopFile, File adminLauncher, String title) throws IOException {
        if (!sourceDesktopFile.getName().endsWith(".desktop")) {
            throw new IllegalArgumentException("Source must be a .desktop file: " + sourceDesktopFile);
        }

        String baseName = sourceDesktopFile.getName().substring(0, sourceDesktopFile.getName().length() - 8);
        File adminDesktopFile = new File(sourceDesktopFile.getParentFile(), baseName + "-admin.desktop");

        // Read the original desktop file
        String originalContent = new String(Files.readAllBytes(sourceDesktopFile.toPath()), StandardCharsets.UTF_8);

        // Modify the content for admin version
        String adminContent = originalContent;

        // Replace the Name field
        adminContent = adminContent.replaceAll("(?m)^Name=.*$", "Name=" + title + " (Run as Admin)");

        // Replace the Exec field to use the admin launcher
        adminContent = adminContent.replaceAll("(?m)^Exec=.*$", "Exec=\"" + adminLauncher.getAbsolutePath() + "\" %U");

        // Write the admin desktop file
        Files.write(adminDesktopFile.toPath(), adminContent.getBytes(StandardCharsets.UTF_8));

        // Make it executable
        makeExecutable(adminDesktopFile);

        return adminDesktopFile;
    }

    /**
     * Main method for testing
     */
    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Usage: AdminLauncherGenerator <path-to-launcher>");
            System.exit(1);
        }

        try {
            File sourceLauncher = new File(args[0]);
            LinuxAdminLauncherGenerator generator = new LinuxAdminLauncherGenerator();
            File adminLauncher = generator.generateAdminLauncher(sourceLauncher);
            System.out.println("Admin launcher created: " + adminLauncher.getAbsolutePath());
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }
}